#version 430 core
layout(local_size_x=1,local_size_y=1) in;

float rand(float fli) {
	uint i=uint(fli);
	i^=2747636419u;
	i*=2654435769u;
	i^=i>>16;
	i*=2654435769u;
	i^=i>>16;
	i*=2654435769u;
	return fract(float(i)/4294967295.0);
}

struct Particle {
	vec4 pos_active;
	vec4 vel;
};
struct Emitter {
	vec4 pos_rad;
	vec4 vel_rate;
	vec4 rvel;
};
layout (std140) buffer particles_buffer {
	Particle[] particles;
};
layout (std140) buffer emitters_buffer {
	Emitter[] emitters;
};
layout (std140) buffer sample_buffer {
	float[] samples;
};
layout (std140) buffer persistentCounter {
	float pcounter;
};
uniform vec3 invocation_dimensions=vec3(0);
uniform int setActive=1;

void main() {
	bool s=(invocation_dimensions.x<1.5 && invocation_dimensions.x>0.5);
	int i=int(mod(int(gl_GlobalInvocationID.x)+int(s)*pcounter,particles.length()));
	int ei=int(samples[int(floor(rand(i+length(particles[i].pos_active.xyz))*samples.length()))]);
	float rs=i+length(particles[i].pos_active)*4.0;
	vec3 spawnSphere=normalize(vec3(rand(rs)*2.0-1.0,rand(rs*2.0)*2.0-1.0,rand(rs*3.0)*2.0-1.0))*emitters[ei].pos_rad.w*rand(rs*4.0);
	particles[i].pos_active=int(s)*(vec4(spawnSphere,setActive)+vec4(emitters[ei].pos_rad.xyz,0));
	particles[i].vel=int(s)*(vec4(emitters[ei].vel_rate.xyz,0)+vec4(vec3(emitters[ei].rvel.x*rand(rs*234.0),emitters[ei].rvel.y*rand(rs*678.0),emitters[ei].rvel.z*rand(rs*321.0)),0));
	pcounter+=int(s);
}